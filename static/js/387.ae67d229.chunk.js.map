{"version":3,"file":"static/js/387.ae67d229.chunk.js","mappings":"oRAEMA,EAAYC,EAAAA,GAAAA,IAAH,uHAQTC,EAAiBD,EAAAA,GAAAA,IAAH,0TAgBdE,EAAaF,EAAAA,GAAAA,IAAH,uJASVG,EAAqBH,EAAAA,GAAAA,IAAH,8CAIlBI,EAAYJ,EAAAA,GAAAA,GAAH,gHAOTK,EAAiBL,EAAAA,GAAAA,EAAH,mF,SC9BL,SAASM,IACtB,OAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACMC,GAASC,EAAAA,EAAAA,MA2Bf,OAvBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,8GAICC,EAAAA,EAAAA,IAAgBJ,EAAOK,SAJxB,OAIhBC,EAJgB,OAKtBP,EAAcO,EAASC,MALD,gDAatBC,QAAQC,IAAR,MAbsB,yDAAH,qDAiBnBT,EAAOK,SACTF,GAEH,GAAE,CAACH,EAAOK,WAGT,SAAChB,EAAD,UACGS,EAAWY,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACzC,OACE,UAACvB,EAAD,YACE,SAACC,EAAD,CACEuB,IACEH,EAAY,yCAC0BA,GAvCpD,8EA0CYI,IAAKH,KAEP,UAACpB,EAAD,YACE,SAACC,EAAD,UAAYmB,KACZ,UAAClB,EAAD,WAAgB,cAAYmB,UAXXH,EAexB,KAGN,C,uNCjEDM,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGX,IAAMd,EAAe,mCAAG,WAAMC,GAAN,uFACCY,EAAAA,EAAAA,IAAA,gBAAmBZ,EAAnB,4BADD,cAChBc,EADgB,yBAGfA,EAASC,MAHM,2CAAH,sDAMfC,EAAe,mCAAG,WAAMhB,GAAN,uFACCY,EAAAA,EAAAA,IAAA,gBAAmBZ,EAAnB,mBADD,cAChBc,EADgB,yBAGfA,EAASC,MAHM,2CAAH,sDAMfE,EAAe,mCAAG,WAAOjB,GAAP,4FAAgBkB,EAAhB,+BAAuB,EAAvB,SACCN,EAAAA,EAAAA,IAAA,gBACZZ,EADY,wCAC2BkB,IAF5B,cAChBJ,EADgB,yBAKfA,EAASC,MALM,2CAAH,sDAQfI,EAAW,mCAAG,oGACKP,EAAAA,EAAAA,IAAA,mCADL,cACZE,EADY,yBAGXA,EAASC,MAHE,2CAAH,qDAMXK,EAAY,mCAAG,2GAAOF,EAAP,+BAAc,EAAGG,EAAjB,gCACIT,EAAAA,EAAAA,IAAA,6BACCS,EADD,oDACkDH,IAFtD,cACbJ,EADa,yBAKZA,EAASC,MALG,2CAAH,qDAQZO,EAAc,mCAAG,2GAAOC,EAAP,+BAAkB,GAAIL,EAAtB,+BAA6B,EAA7B,SACEN,EAAAA,EAAAA,IAAA,qCACSW,EADT,iBAC0BL,IAF5B,cACfJ,EADe,yBAKdA,EAASC,MALK,2CAAH,oD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","helpers/API.js"],"sourcesContent":["import styled from 'styled-components';\n\nconst ActorCard = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  row-gap: 32px;\n  column-gap: 16px;\n  padding: 20px;\n`;\n\nconst ActorContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  border-radius: 5%;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  cursor: pointer;\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.2);\n\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n\nconst ActorImage = styled.img`\n  display: block;\n  width: 200px;\n\n  border-radius: 5%;\n  object-fit: cover;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nconst ActorInfoContainer = styled.div`\n  padding: 12px 8px;\n`;\n\nconst ActorName = styled.h3`\n  margin-bottom: 8px;\n  text-align: center;\n  font-size: 14px;\n  font-weight: bold;\n`;\n\nconst ActorCharacter = styled.p`\n  text-align: center;\n  font-size: 10px;\n  color: #888;\n`;\n\nexport {\n  ActorCard,\n  ActorContainer,\n  ActorImage,\n  ActorInfoContainer,\n  ActorName,\n  ActorCharacter,\n};\n","import { getMovieCredits } from 'helpers/API';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  ActorCard,\n  ActorContainer,\n  ActorImage,\n  ActorInfoContainer,\n  ActorName,\n  ActorCharacter,\n} from './Cast.styled';\n\n// import defaultPic from 'download.jpg';\nconst defaultImg =\n  'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\nexport default function Cast() {\n  const [aboutCasts, setAboutCasts] = useState([]);\n  const params = useParams();\n\n  // const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieCredits = async () => {\n      // setIsError(false);\n\n      try {\n        const infoCast = await getMovieCredits(params.movieId);\n        setAboutCasts(infoCast.cast);\n\n        // if (infoCast.cast.length === 0) {\n        //   setIsError(true);\n        // } else {\n        //   setAboutCasts(infoCast.cast);\n        // }\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    if (params.movieId) {\n      fetchMovieCredits();\n    }\n  }, [params.movieId]);\n\n  return (\n    <ActorCard>\n      {aboutCasts.map(({ id, profile_path, name, character }) => {\n        return (\n          <ActorContainer key={id}>\n            <ActorImage\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w200${profile_path}`\n                  : defaultImg\n              }\n              alt={name}\n            />\n            <ActorInfoContainer>\n              <ActorName>{name}</ActorName>\n              <ActorCharacter>Character: {character}</ActorCharacter>\n            </ActorInfoContainer>\n          </ActorContainer>\n        );\n      })}\n    </ActorCard>\n  );\n}\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: '1313eb7d87ffc79c96ba5fefca3b8f25',\n};\n\nconst getMovieCredits = async movieId => {\n  const response = await axios.get(`movie/${movieId}/credits?language=en-US`);\n\n  return response.data;\n};\n\nconst getMovieDetails = async movieId => {\n  const response = await axios.get(`movie/${movieId}?language=en-U`);\n\n  return response.data;\n};\n\nconst getMovieReviews = async (movieId, page = 1) => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?language=en-US&page=${page}`\n  );\n\n  return response.data;\n};\n\nconst getTrending = async () => {\n  const response = await axios.get(`trending/all/day?language=en-US`);\n\n  return response.data;\n};\n\nconst searchMovies = async (page = 1, query) => {\n  const response = await axios.get(\n    `search/movie?query=${query}&include_adult=false&language=en-US&page=${page}`\n  );\n\n  return response.data;\n};\n\nconst getMovieGenres = async (genresID = 14, page = 1) => {\n  const response = await axios.get(\n    `discover/movie?with_genres=${genresID}&page=${page}`\n  );\n\n  return response.data;\n};\n\nexport {\n  getMovieCredits,\n  getMovieDetails,\n  getMovieReviews,\n  getTrending,\n  searchMovies,\n  getMovieGenres,\n};\n"],"names":["ActorCard","styled","ActorContainer","ActorImage","ActorInfoContainer","ActorName","ActorCharacter","Cast","useState","aboutCasts","setAboutCasts","params","useParams","useEffect","fetchMovieCredits","getMovieCredits","movieId","infoCast","cast","console","log","map","id","profile_path","name","character","src","alt","axios","api_key","response","data","getMovieDetails","getMovieReviews","page","getTrending","searchMovies","query","getMovieGenres","genresID"],"sourceRoot":""}