{"version":3,"file":"static/js/387.0972e2c2.chunk.js","mappings":"sSAEMA,EAAYC,EAAAA,GAAAA,IAAH,uHAQTC,EAAiBD,EAAAA,GAAAA,IAAH,0TAgBdE,EAAaF,EAAAA,GAAAA,IAAH,uJASVG,EAAqBH,EAAAA,GAAAA,IAAH,8CAIlBI,EAAYJ,EAAAA,GAAAA,GAAH,gHAOTK,EAAiBL,EAAAA,GAAAA,EAAH,mF,kBC7BL,SAASM,IACtB,OAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEMC,GAASC,EAAAA,EAAAA,MAEf,GAAgCN,EAAAA,EAAAA,UAAS,MAAzC,eAAOO,EAAP,KAAiBC,EAAjB,KAyBA,OAvBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,8GAICC,EAAAA,EAAAA,IAAgBN,EAAOO,SAJxB,OAIhBC,EAJgB,OAKtBX,EAAcW,EAASC,MALD,gDAatBC,QAAQC,IAAR,MAbsB,yDAAH,qDAiBnBX,EAAOO,SACTF,GAEH,GAAE,CAACL,EAAOO,WAGT,UAACpB,EAAD,WACGS,EAAWgB,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACzC,OACE,SAAC,KAAD,CACEC,QAAS,WACPlB,GAAa,GACbI,EAAYU,EACb,EAGDK,MAAO,CAAEC,eAAgB,QAP3B,UASE,UAAC9B,EAAD,YACE,SAACC,EAAD,CACE8B,IACEN,EAAY,yCAC0BA,GAlDtD,8EAqDcO,IAAKN,KAEP,UAACxB,EAAD,YACE,SAACC,EAAD,UAAYuB,KACZ,UAACtB,EAAD,WAAgB,cAAYuB,UAXXH,IAJhBA,EAoBV,IACAf,IACC,SAACwB,EAAA,EAAD,CACEpB,SAAUA,EACVqB,YAAazB,EACb0B,WAAY,kBAAMzB,GAAa,EAAnB,MAKrB,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nconst ActorCard = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  row-gap: 32px;\n  column-gap: 16px;\n  padding: 20px;\n`;\n\nconst ActorContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  border-radius: 5%;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  cursor: pointer;\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.2);\n\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n\nconst ActorImage = styled.img`\n  display: block;\n  width: 200px;\n\n  border-radius: 5%;\n  object-fit: cover;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nconst ActorInfoContainer = styled.div`\n  padding: 12px 8px;\n`;\n\nconst ActorName = styled.h3`\n  margin-bottom: 8px;\n  text-align: center;\n  font-size: 14px;\n  font-weight: bold;\n`;\n\nconst ActorCharacter = styled.p`\n  text-align: center;\n  font-size: 10px;\n  color: #888;\n`;\n\nexport {\n  ActorCard,\n  ActorContainer,\n  ActorImage,\n  ActorInfoContainer,\n  ActorName,\n  ActorCharacter,\n};\n","import { getMovieCredits } from 'helpers/API';\nimport { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport {\n  ActorCard,\n  ActorContainer,\n  ActorImage,\n  ActorInfoContainer,\n  ActorName,\n  ActorCharacter,\n} from './Cast.styled';\nimport { PersonModal } from 'components/BackButton/Modal/PersonModal';\n\n// import defaultPic from 'download.jpg';\nconst defaultImg =\n  'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\nexport default function Cast() {\n  const [aboutCasts, setAboutCasts] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n\n  const params = useParams();\n  // const [isError, setIsError] = useState(false);\n  const [personId, setPersonId] = useState(null);\n  // console.log(personId);\n  useEffect(() => {\n    const fetchMovieCredits = async () => {\n      // setIsError(false);\n\n      try {\n        const infoCast = await getMovieCredits(params.movieId);\n        setAboutCasts(infoCast.cast);\n\n        // if (infoCast.cast.length === 0) {\n        //   setIsError(true);\n        // } else {\n        //   setAboutCasts(infoCast.cast);\n        // }\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    if (params.movieId) {\n      fetchMovieCredits();\n    }\n  }, [params.movieId]);\n\n  return (\n    <ActorCard>\n      {aboutCasts.map(({ id, profile_path, name, character }) => {\n        return (\n          <Link\n            onClick={() => {\n              setShowModal(true);\n              setPersonId(id);\n            }}\n            key={id}\n            // to={`/Person/${id}`}\n            style={{ textDecoration: 'none' }}\n          >\n            <ActorContainer key={id}>\n              <ActorImage\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w200${profile_path}`\n                    : defaultImg\n                }\n                alt={name}\n              />\n              <ActorInfoContainer>\n                <ActorName>{name}</ActorName>\n                <ActorCharacter>Character: {character}</ActorCharacter>\n              </ActorInfoContainer>\n            </ActorContainer>\n          </Link>\n        );\n      })}\n      {showModal && (\n        <PersonModal\n          personId={personId}\n          modalIsOpen={showModal}\n          closeModal={() => setShowModal(false)}\n        ></PersonModal>\n      )}\n    </ActorCard>\n  );\n}\n"],"names":["ActorCard","styled","ActorContainer","ActorImage","ActorInfoContainer","ActorName","ActorCharacter","Cast","useState","aboutCasts","setAboutCasts","showModal","setShowModal","params","useParams","personId","setPersonId","useEffect","fetchMovieCredits","getMovieCredits","movieId","infoCast","cast","console","log","map","id","profile_path","name","character","onClick","style","textDecoration","src","alt","PersonModal","modalIsOpen","closeModal"],"sourceRoot":""}